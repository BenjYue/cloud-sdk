"use strict";(self.webpackChunksap_cloud_sdk_documentation=self.webpackChunksap_cloud_sdk_documentation||[]).push([[9238],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},28555:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={title:"Develop your App for Kubernetes with SAP Gardener and Java SDK",sidebar_label:"Kubernetes with SAP Gardener",description:"Learn how to develop with SAP Cloud SDK for Java for Kubernetes environment backed by SAP Gardener",keywords:["sap","cloud","sdk","cloud native","cloud sdk","sap cloud sdk","kubernetes","java","k8s","gardener"]},o=void 0,s={unversionedId:"environments/sap-btp-kubernetes-environment-with-sap-gardener",id:"environments/sap-btp-kubernetes-environment-with-sap-gardener",title:"Develop your App for Kubernetes with SAP Gardener and Java SDK",description:"Learn how to develop with SAP Cloud SDK for Java for Kubernetes environment backed by SAP Gardener",source:"@site/docs-java/environments/sap-btp-kubernetes-environment-with-sap-gardener.mdx",sourceDirName:"environments",slug:"/environments/sap-btp-kubernetes-environment-with-sap-gardener",permalink:"/cloud-sdk/docs/java/environments/sap-btp-kubernetes-environment-with-sap-gardener",draft:!1,tags:[],version:"current",frontMatter:{title:"Develop your App for Kubernetes with SAP Gardener and Java SDK",sidebar_label:"Kubernetes with SAP Gardener",description:"Learn how to develop with SAP Cloud SDK for Java for Kubernetes environment backed by SAP Gardener",keywords:["sap","cloud","sdk","cloud native","cloud sdk","sap cloud sdk","kubernetes","java","k8s","gardener"]},sidebar:"docsJavaSidebar",previous:{title:"SAP BTP Cloud Foundry",permalink:"/cloud-sdk/docs/java/environments/sap-btp-cloud-foundry-environment"},next:{title:"SAP Kyma",permalink:"/cloud-sdk/docs/java/environments/sap-btp-kyma-environment"}},l={},p=[{value:"SAP Cloud SDK Features Supported on SAP Gardener",id:"sap-cloud-sdk-features-supported-on-sap-gardener",level:2},{value:"Getting Started with the SAP Cloud SDK on Gardener",id:"getting-started-with-the-sap-cloud-sdk-on-gardener",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Containerize the Application",id:"containerize-the-application",level:3},{value:"Create a Kubernetes Deployment",id:"create-a-kubernetes-deployment",level:3},{value:"Create an Ingress",id:"create-an-ingress",level:3},{value:"Access Your Application",id:"access-your-application",level:3},{value:"Bind SAP BTP Services to the Application",id:"bind-sap-btp-services-to-the-application",level:3},{value:"Bind the Destination Service",id:"bind-the-destination-service",level:4},{value:"Bind the Identity and Authentication Service",id:"bind-the-identity-and-authentication-service",level:4},{value:"Excursion: Bind Services created by the Service Catalog",id:"excursion-bind-services-created-by-the-service-catalog",level:2},{value:"Known XSUAA Service Incompatibility",id:"known-xsuaa-service-incompatibility",level:3},{value:"Known Connectivity Service Incompatibility",id:"known-connectivity-service-incompatibility",level:3},{value:"On-Premise Connectivity",id:"on-premise-connectivity",level:2},{value:"Excursion: Debug Kubernetes App From Your Local IDE",id:"excursion-debug-kubernetes-app-from-your-local-ide",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://gardener.cloud/"},"SAP Gardener")," is a managed Kubernetes service by SAP developed as an Open Source project.\nIt helps create and manage multiple Kubernetes clusters with less effort by abstracting environment specifics to deliver the same homogeneous Kubernetes-native DevOps experience everywhere."),(0,i.kt)("p",null,"The SAP Cloud SDK for Java supports SAP Gardener-based Kubernetes clusters out of the box."),(0,i.kt)("h2",{id:"sap-cloud-sdk-features-supported-on-sap-gardener"},"SAP Cloud SDK Features Supported on SAP Gardener"),(0,i.kt)("p",null,"Find below the list of features we currently support:\nLegend: \u2705 - supported, \u2757- partially supported, \u274c - not supported"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u2705 Consume SAP BTP services like Destination, Connectivity, IAS, XSUAA, and others"),(0,i.kt)("li",{parentName:"ul"},"\u2705 Multitenancy"),(0,i.kt)("li",{parentName:"ul"},"\u2705 Resilience & Caching"),(0,i.kt)("li",{parentName:"ul"},"\u2705 Connect to and consume services from SAP S/4HANA Cloud"),(0,i.kt)("li",{parentName:"ul"},"\u274c Connect to and consume services from SAP S/4HANA On-Premise"),(0,i.kt)("li",{parentName:"ul"},"\u2705 Seamless use of typed clients provided by the SAP Cloud SDK")),(0,i.kt)("h2",{id:"getting-started-with-the-sap-cloud-sdk-on-gardener"},"Getting Started with the SAP Cloud SDK on Gardener"),(0,i.kt)("p",null,"This detailed guide will help get your SAP Cloud SDK Java application up and running in the SAP Gardener-based Kubernetes cluster.\nYou can also use this guide to migrate your existing application to Kubernetes."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For additional information on more deployment options you can also check out the ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000/cloud-sdk/docs/js/guides/migrate-sdk-application-from-btp-cf-to-kubernetes#configure-tls-and-obtain-a-domain-in-sap-gardener"},"guide for JavaScript"),".")),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"To follow this guide you will need:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("a",{parentName:"li",href:"https://gardener.cloud/"},"Gardener")," managed cluster"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/SAP/sap-btp-service-operator/"},"SAP BTP Service Operator")," installed in the Cluster"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.docker.com/"},"Docker")," and a publicly reachable Docker repository"),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("a",{parentName:"li",href:"https://spring.io/projects/spring-boot"},"Spring Boot")," Application using the SAP Cloud SDK")),(0,i.kt)("p",null,"Check out the details below in case you are uncertain about any of the prerequisites."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Gardener Cluster"),(0,i.kt)("p",null,"This guide assumes you have created a cluster via Gardener dashboard, have ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/tools/#kubectl"},"Kubernetes CLI")," installed on your local machine and have it set up for cluster access."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl cluster-info")," should print out your cluster endpoints."),(0,i.kt)("p",{parentName:"admonition"},"In case you haven't set this up you can do so by downloading a ",(0,i.kt)("inlineCode",{parentName:"p"},"kubeconfig")," from your Gardener dashboard.\nYou can read more about accessing clusters using ",(0,i.kt)("inlineCode",{parentName:"p"},"kubeconfig")," on the ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/"},"Kubernetes documentation"))),(0,i.kt)("p",null,"We also recommend to have an Ingress set up that exposes the application to the internet.\nYou can read more about configuring an Ingress on the ",(0,i.kt)("a",{parentName:"p",href:"https://gardener.cloud/docs/guides/applications/service-access/#loadbalancer-vs-ingress"},"Gardener documentation"),".")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"SAP BTP Service Operator"),(0,i.kt)("p",null,"This guide assumes you have the ",(0,i.kt)("a",{parentName:"p",href:"https://help.sap.com/viewer/09cc82baadc542a688176dce601398de/Cloud/en-US/b5a35bfa87b5444080e6e6e6d361fa20.html"},"SAP BTP Service Operator")," installed in your cluster.\nThe operator is used to create and bind service instances.\nThe same can also be achieved via the ",(0,i.kt)("a",{parentName:"p",href:"https://help.sap.com/viewer/09cc82baadc542a688176dce601398de/Cloud/en-US/20195bf3b6e64189966e08f669c275e1.html"},"Service Catalog"),".\nHowever, this guide will focus on the Service Operator usage."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"In case you don't have it installed please follow the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SAP/sap-btp-service-operator#sap-business-technology-platform-sap-btp-service-operator-for-kubernetes"},"documentation")," to install it."))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Docker"),(0,i.kt)("p",null,"This guide assumes you have ",(0,i.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," installed on your local machine."),(0,i.kt)("p",null,"Furthermore, you need a ",(0,i.kt)("strong",{parentName:"p"},"Docker repository")," where you can store images.\nThe repository needs to be publicly accessible in order for the cluster to access and download the Docker image we are going to create."),(0,i.kt)("p",null,"In case you don't have such a repository yet we recommend either:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://hub.docker.com/"},"Docker Hub")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://common.repositories.cloud.sap/ui/"},"Artifactory DMZ")," (for SAP internal developers)")),(0,i.kt)("p",null,"Access to images in a repository may be limited to authenticated and/or authorized users, depending on your configuration."),(0,i.kt)("p",null,"Make sure you are logged in to your repository on your local machine by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker login (your-repo) --username=(your-username)\n")),(0,i.kt)("p",null,"And check your configuration which is usually located under ",(0,i.kt)("inlineCode",{parentName:"p"},"(your-home-directory)/.docker/config.json"),"."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"In case AuthN/AuthZ is required to download images make sure you have a ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-by-providing-credentials-on-the-command-line"},"secret configured in your cluster"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret docker-registry (name-of-the-secret) --docker-username=(username) --docker-password=(API-token) --docker-server=(your-repo)\n")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Application using the SAP Cloud SDK"),(0,i.kt)("p",null,"If you don't have an application already you can comfortably ",(0,i.kt)("a",{parentName:"p",href:"../getting-started"},"create one from our archetypes"),".")),(0,i.kt)("h3",{id:"containerize-the-application"},"Containerize the Application"),(0,i.kt)("p",null,"To run on Kubernetes the application needs to be shipped in a container.\nFor this guide we will be using Docker."),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the project root directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dockerfile",metastring:"{2}","{2}":!0},'FROM openjdk:8-jdk-alpine\nARG JAR_FILE=application/target/*.jar\nCOPY ${JAR_FILE} app.jar\nENTRYPOINT ["java","-jar","/app.jar"]\nEXPOSE 8080\n')),(0,i.kt)("p",null,"If needed, update the ",(0,i.kt)("inlineCode",{parentName:"p"},"JAR_FILE")," to point to your JAR file."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can find more information on how to containerize Spring Boot applications in ",(0,i.kt)("a",{parentName:"p",href:"https://spring.io/guides/gs/spring-boot-docker/"},"this guide")," (in particular, check the ",(0,i.kt)("em",{parentName:"p"},"Containerize It")," section).")),(0,i.kt)("p",null,"Compile and push the image by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t <your-repo>/<your-image-name> .\ndocker push <your-repo>/<your-image-name>\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"In case you are facing authorization issues when pushing to your repository refer to the dedicated section under ",(0,i.kt)("a",{parentName:"p",href:"#prerequisites"},"Prerequisites"),".")),(0,i.kt)("h3",{id:"create-a-kubernetes-deployment"},"Create a Kubernetes Deployment"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a new YAML file describing the Kubernetes deployment:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="deployment.yml" {18,32}',title:'"deployment.yml"',"{18,32}":!0},"---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        # Configure the docker image you just pushed to your repository here\n        - image: <your-repo>/<your-image>:latest\n          name: my-app\n          imagePullPolicy: Always\n          resources:\n            requests:\n              memory: '1Gi'\n              cpu: '500m'\n            limits:\n              memory: '1.5Gi'\n              cpu: '750m'\n          # Volume mounts needed for injecting BTP service credentials\n          volumeMounts:\n      imagePullSecrets:\n        # In case your repository requires a login, reference your secret here\n        - name: <your-secret-for-docker-login>\n      # Volumes containing BTP serice credentials from secrets\n      volumes:\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: my-app\n  name: my-app\n  namespace: default\nspec:\n  type: NodePort\n  ports:\n    - port: 8080\n  selector:\n    app: my-app\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the configuration via ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl apply -f deployment.yml"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Monitor the status of the deployment by running: ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl get deployment my-app-deployment"),"."))),(0,i.kt)("p",null,"Eventually, you should see an output similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ kubectl get deployment my-app-deployment\n\nNAME                READY   UP-TO-DATE   AVAILABLE   AGE\nmy-app-deployment   1/1     1            1           15s\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"In case something went wrong use ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl describe")," together with ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"pod")," to get more information about the status of your application.")),(0,i.kt)("h3",{id:"create-an-ingress"},"Create an Ingress"),(0,i.kt)("p",null,"To make your application available from outside the cluster we will create an Ingress."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In case you already have an Ingress configured in your cluster only add the new ",(0,i.kt)("inlineCode",{parentName:"p"},"rule")," for your new applications."),(0,i.kt)("p",{parentName:"admonition"},"You can read more about configuring an Ingress on the ",(0,i.kt)("a",{parentName:"p",href:"https://gardener.cloud/docs/guides/applications/service-access/#loadbalancer-vs-ingress"},"Gardener documentation"),".")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a new YAML file containing the following Ingress configuration:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="ingress.yml" {12-13,16}',title:'"ingress.yml"',"{12-13,16}":!0},'---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-router\n  namespace: default\n  annotations:\n  # cert.gardener.cloud/purpose: managed\nspec:\n  tls:\n    - hosts:\n      # - "<your-cluster-host>"\n      # - "*.ingress.<your-cluster-host>"\n    # secretName: secret-tls\n  rules:\n    - host: \'my-app.ingress.<your-cluster-host>\'\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: my-app\n                port:\n                  number: 8080\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the configuration via ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl apply -f ingress.yml"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Verify the Ingress is up and running: ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl describe ingress ingress-router")))),(0,i.kt)("p",null,"You should see an entry with the path ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," pointing to the backend ",(0,i.kt)("inlineCode",{parentName:"p"},"my-app"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In case something went wrong and you are struggling to configure the Ingress you can also come back and set it up later.\nThe Ingress is a convenient way to access your application.\nIt is not strictly required for the rest of this guide.")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Recommended: Configure TLS for your Ingress"),(0,i.kt)("p",null,"Enable the NGINX Ingress add-on in your Gardener dashboard.\nThe process may take a few minutes.\nAfterwards, you should see a domain in the dashboard as well as a Kubernetes secret ",(0,i.kt)("inlineCode",{parentName:"p"},"secret-tls"),"."),(0,i.kt)("p",null,"Un-comment the 4 lines in the YAML above using the generated domain and secret.\nThen re-deploy the configuration as usual.\nYour cluster endpoint should now be trusted by your browser.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"We highly recommended enabling TLS for your cluster endpoints.\nIt ensures your client (e.g. browser) can verify the cluster's identity.")),(0,i.kt)("h3",{id:"access-your-application"},"Access Your Application"),(0,i.kt)("p",null,"At this point take a moment to verify you can access your application.\nUse the host you have defined in your Ingress rule in a browser or other tool of your choice (e.g. Postman).\nIn case you started with an SAP Cloud SDK Archetype your should be greeted with a welcome page under the root path."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In case you skipped setting up an Ingress before you can use port forwarding to access your application."),(0,i.kt)("p",{parentName:"admonition"},"Identify the pod name of your application with ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl get pods"),".\nThen enable port forwarding to it by running: ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl port-forward (your-pod-name) 8080:8080"),".\nWith that you should be able to access the application on your ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:8080"))),(0,i.kt)("h3",{id:"bind-sap-btp-services-to-the-application"},"Bind SAP BTP Services to the Application"),(0,i.kt)("p",null,"The SAP Business Technology Platform offers various services that can be used by applications.\nTo access services from a Kubernetes environment instances have to be created and bound to the application."),(0,i.kt)("p",null,"For this guide we'll assume we want to use two services:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Destination Service"),(0,i.kt)("li",{parentName:"ol"},"Identity and Authentication Service (IAS)")),(0,i.kt)("h4",{id:"bind-the-destination-service"},"Bind the Destination Service"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a new YAML file:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="destination-service.yaml"',title:'"destination-service.yaml"'},"---\napiVersion: services.cloud.sap.com/v1alpha1\nkind: ServiceInstance\nmetadata:\n  name: destination-service\nspec:\n  serviceOfferingName: destination\n  servicePlanName: lite\n  externalName: default-destination-service\n---\napiVersion: services.cloud.sap.com/v1alpha1\nkind: ServiceBinding\nmetadata:\n  name: my-destination-service-binding\nspec:\n  serviceInstanceName: destination-service\n  secretName: my-destination-service-secret\n  secretRootKey: my-destination-service-key\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the configuration via ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl apply -f destination-service.yml"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Monitor the status via ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl describe ServiceInstance destination-service"),".\nEventually this should automatically create a Kubernetes secret named ",(0,i.kt)("inlineCode",{parentName:"p"},"my-destination-service-secret"),".\nThis secret will contain the actual service binding information.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Mount the ",(0,i.kt)("inlineCode",{parentName:"p"},"my-destination-service-secret")," secret into the file system of the application as follows:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Find the empty list of ",(0,i.kt)("inlineCode",{parentName:"p"},"volumes")," at the end of your ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment.yml"),".\nAdd a new volume, referencing the secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="volumes:"',title:'"volumes:"'},"- name: my-destination-service-binding-volume\n  secret:\n    secretName: my-destination-service-secret\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Mount this volume into the file system of your application.\nAdd it to the empty list of ",(0,i.kt)("inlineCode",{parentName:"p"},"volumeMounts")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"container")," section of your ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment.yml"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="volumeMounts:"',title:'"volumeMounts:"'},"- name: my-destination-service-binding-volume\n  mountPath: '/etc/secrets/sapcp/destination/my-destination-service'\n  readOnly: true\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Update the configuration via ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl apply -f deployment.yml"),"."))),(0,i.kt)("h4",{id:"bind-the-identity-and-authentication-service"},"Bind the Identity and Authentication Service"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a new ",(0,i.kt)("inlineCode",{parentName:"li"},"identity-service.yaml")," file:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="identity-service.yaml"',title:'"identity-service.yaml"'},"---\napiVersion: services.cloud.sap.com/v1alpha1\nkind: ServiceInstance\nmetadata:\n  name: my-identity-service\nspec:\n  serviceOfferingName: identity\n  servicePlanName: application\n  parameters:\n    # Allowed redirect URIs in case you want to use an approuter behind an ingress for user login\n    # oauth2-configuration:\n    #  redirect-uris:\n    #    - https://*.ingress.<your-cluster-host>/login/callback\n    consumed-services: []\n    xsuaa-cross-consumption: true\n    multi-tenant: true\n---\napiVersion: services.cloud.sap.com/v1alpha1\nkind: ServiceBinding\nmetadata:\n  name: my-identity-service-binding\nspec:\n  serviceInstanceName: my-identity-service\n  secretName: my-identity-service-secret\n  secretRootKey: my-identity-service-key\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Repeat the same steps 2-5 from the previous section, always replacing ",(0,i.kt)("inlineCode",{parentName:"li"},"destination")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"identity"),".")),(0,i.kt)("h2",{id:"excursion-bind-services-created-by-the-service-catalog"},"Excursion: Bind Services created by the Service Catalog"),(0,i.kt)("p",null,"In case of using the ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/extend-kubernetes/service-catalog/"},"Kubernetes Service Catalog")," via the ",(0,i.kt)("a",{parentName:"p",href:"https://svc-cat.io/docs/cli/"},"Service Catalog CLI")," you will receive service bindings that are not immediately compatible with the SAP Cloud SDK."),(0,i.kt)("h3",{id:"known-xsuaa-service-incompatibility"},"Known XSUAA Service Incompatibility"),(0,i.kt)("p",null,"For example, let us assume you want to create an XSUAA Service Binding.\nYou would use commands similar to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"svcat provision svcat-xsuaa-service --class xsuaa --plan application\nsvcat bind svcat-xsuaa-service\n")),(0,i.kt)("p",null,"To see the resulting secret on K8s you can run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secrets svcat-xsuaa-service -o yaml\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," block of the result looks something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiurl: <base64-encoded-value>\nclientid: <base64-encoded-value>\nclientsecret: <base64-encoded-value>\ncredential-type: <base64-encoded-value>\nidentityzone: <base64-encoded-value>\nidentityzoneid: <base64-encoded-value>\nsburl: <base64-encoded-value>\nsubaccountid: <base64-encoded-value>\ntenantid: <base64-encoded-value>\ntenantmode: <base64-encoded-value>\nuaadomain: <base64-encoded-value>\nurl: <base64-encoded-value>\nverificationkey: <base64-encoded-value>\nxsappname: <base64-encoded-value>\nzoneid: <base64-encoded-value>\n")),(0,i.kt)("p",null,"You can see that the property ",(0,i.kt)("inlineCode",{parentName:"p"},"plan")," is missing there.\nThis property, however, is required by the SAP Cloud SDK, so that runtime errors are produced once the application tries to read this service binding."),(0,i.kt)("p",null,"To fix this issue you need to edit the secret so that it contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"plan")," property.\nThe easiest way, when you are already using the CLI, is by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl edit")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl edit secrets svcat-xsuaa-service\n")),(0,i.kt)("p",null,"In there you can now add a ",(0,i.kt)("inlineCode",{parentName:"p"},"plan")," property with one of the following base64 encoded values:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"plan"),(0,i.kt)("th",{parentName:"tr",align:null},"base64 encoded value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"application")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YXBwbGljYXRpb24K"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"broker")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YnJva2VyCg=="))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"space")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"c3BhY2UK"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"apiaccess")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YXBpYWNjZXNzCg=="))))),(0,i.kt)("p",null,"The resulting service binding can now be consumed with the SAP Cloud SDK."),(0,i.kt)("h3",{id:"known-connectivity-service-incompatibility"},"Known Connectivity Service Incompatibility"),(0,i.kt)("p",null,"As another example, let us assume you want to create an Connectivity Service Binding with the Service Catalog CLI."),(0,i.kt)("p",null,"You would, again, use commands similar to the following to create the binding:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"svcat provision svcat-connectivity-service --class connectivity --plan connectivity_proxy\nsvcat bind svcat-connectivity-service\n")),(0,i.kt)("p",null,"This time we will have a look at the decoded content by executing the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'kubectl get secret svcat-connectivity-service -o go-template=\'{{range $k,$v := .data}}{{printf "%s: " $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{"\\n"}}{{end}}\'\n')),(0,i.kt)("p",null,"This will show you the content of the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," block with all values base64 decoded:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'clientid: <some-string>\nclientsecret: <some-string>\nconnectivity_service: {"CAs_path":"<some-string>","CAs_signing_path":"<some-string>","api_path":"<some-string>","tunnel_path":"<some-string>","url":"<some-string>"}\nsubaccount_id: <some-string>\nsubaccount_subdomain: <some-string>\ntoken_service_domain: <some-string>\ntoken_service_url: <some-string>\ntoken_service_url_pattern: <some-string>\ntoken_service_url_pattern_tenant_key: <some-string>\nxsappname: <some-string>\n')),(0,i.kt)("p",null,"Here you can see, that the ",(0,i.kt)("inlineCode",{parentName:"p"},"connectivity_service")," property contains a JSON object, whereas the other properties only contain simple strings.\nDue to the way the SAP Cloud SDK reads the service bindings and tries to find the credentials, it assumes that a single JSON object property contains the credentials.\nIn our case, however, this does not hold true."),(0,i.kt)("p",null,"To fix this issue you would follow the same step described above, this time just removing the unnecessary property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl edit secrets svcat-connectivity-service\n")),(0,i.kt)("h2",{id:"on-premise-connectivity"},"On-Premise Connectivity"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"On-Premise connectivity in Kubernetes is currently not available for external SAP customers.\nThis might be changed in the near future.\nWe'll be updating our documentation accordingly."),(0,i.kt)("p",{parentName:"admonition"},"The following steps have not been tested by our team.")),(0,i.kt)("p",null,"To connect to On-Premise systems inside a Kubernetes cluster, you need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Connectivity Proxy"),".\nThe following guide will show you what has to be done to create and use it."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You need to create a route for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Connectivity Proxy")," to use.\nThis route needs to have TLS enabled.\nTo enable TLS on ",(0,i.kt)("inlineCode",{parentName:"p"},"SAP Gardener"),", refer to the note on ",(0,i.kt)("a",{parentName:"p",href:"#create-an-ingress"},"Create an Ingress")," section."),(0,i.kt)("p",{parentName:"li"},"Here is an example where we add our custom domain ",(0,i.kt)("inlineCode",{parentName:"p"},"connectivitytunnel.*")," to our TLS section, in ",(0,i.kt)("inlineCode",{parentName:"p"},"SAP Gardener"),".\nThis creates a certificate for this domain automatically."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  tls:\n    - hosts:\n        - '<your-cluster-host>'\n        - '*.ingress.<your-cluster-host>'\n        - 'connectivitytunnel.ingress.<your-cluster-host>'\n      secretName: secret-tls\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Now we need to add our CA certificate to the JVM trust store of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Cloud Connector"),".\nThe CA certificate is stored in the TLS secret, in our case, it is ",(0,i.kt)("inlineCode",{parentName:"p"},"secret-tls"),"."),(0,i.kt)("p",{parentName:"li"},"To access the information inside a secret, use the following code snippet:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl get secret <secret-name> -o go-template=\'\n{{range $k,$v := .data}}{{printf "%s: " $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{"\\n"}}{{end}}\'\n')),(0,i.kt)("p",{parentName:"li"},"Inside the secret should be a block prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"ca.crt"),", copy this certificate into a file and then follow ",(0,i.kt)("a",{parentName:"p",href:"https://connect2id.com/blog/importing-ca-root-cert-into-jvm-trust-store"},"this guide")," to add it to the JVM trust store of your ",(0,i.kt)("inlineCode",{parentName:"p"},"Cloud Connector"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create and bind the connectivity service with the ",(0,i.kt)("inlineCode",{parentName:"p"},"connectivty_proxy")," plan.\nWe already explained how to do it in the ",(0,i.kt)("a",{parentName:"p",href:"#known-connectivity-service-incompatibility"},"section above"),".\nAdditionally, to bind the secret represented by Kubernetes native YAML format, you need to convert it to a JSON to be consumable by the connectivity proxy.\nRetrieve the secret's content using the previous code snippet and convert it into a ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON")," before saving it. You can use the following as a guiding example."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: connectivity-proxy-service-key\ntype: Opaque\nstringData:\n  connectivity_key: \'{\n    "clientid": "<client-id>",\n    "clientsecret": "<clientsecret>",\n    "xsappname": "<xsappname>",\n    "connectivity_service": {\n        "CAs_path":"/api/v1/CAs",\n        "CAs_signing_path":"/api/v1/CAs/signing",\n        "api_path":"/api/v1",\n        "tunnel_path":"/api/v1/tunnel",\n        "url":"https://connectivity.cf.sap.hana.ondemand.com"\n    },\n    "subaccount_id": "<subaccount_id",\n    "subaccount_subdomain": "<subaccount_subdomain>",\n    "token_service_domain": "<token_service_domain">",\n    "token_service_url": "<token_service_url>",\n    "token_service_url_pattern": "https://{tenant}.authentication.sap.hana.ondemand.com/oauth/token",\n    "token_service_url_pattern_tenant_key": "subaccount_subdomain"\n}\'\n')),(0,i.kt)("admonition",{parentName:"li",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Note that we used the ",(0,i.kt)("inlineCode",{parentName:"p"},"stringData")," field type instead of the default ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," field type to benefit from automatic base64 encoding, instead of doing it ourselves.\nThis is a requirement of the connectivity proxy since it can't consume the data of the secret in YAML format yet."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Now we need to download the CA certificate of the connectivity service and create a secret containing:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The CA certificate of the connectivity service"),(0,i.kt)("li",{parentName:"ul"},"Our private key"),(0,i.kt)("li",{parentName:"ul"},"Our public certificate")),(0,i.kt)("p",{parentName:"li"},"The private key and public certificate are also stored in our TLS secret, use the previous code snippet to retrieve it from the secret and save them in separate files.\nFinally, download the CA certificate with the following line:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://connectivity.cf.sap.hana.ondemand.com/api/v1/CAs/signing -o connectivity_ca.crt\n")),(0,i.kt)("p",{parentName:"li"},"Now you can create the secret with this command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret generic connectivity-tls --from-file=ca.crt=<your-connectivity-ca.crt> --from-file=tls.key=<your-private.key> --from-file=tls.crt=<your-public.crt> --namespace default\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a secret that contains credentials to access the docker image which the ",(0,i.kt)("inlineCode",{parentName:"p"},"Connectivity Proxy")," is using."),(0,i.kt)("p",{parentName:"li"},"The image is located here: ",(0,i.kt)("inlineCode",{parentName:"p"},"deploy-releases.docker.repositories.sap.ondemand.com")),(0,i.kt)("p",{parentName:"li"},"To create the registry secret, use the following command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret docker-registry <your-registry-secret> \\\n  --docker-username=<your-username> \\\n  --docker-password=<your-password> \\\n  --docker-server=deploy-releases.docker.repositories.sap.ondemand.com\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"values.yaml")," file containing the configuration that suits your desired operational mode of the connectivity proxy, for the available operational modes refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/f3c1ef45db77489c8d039acc9530358f.html"},"documentation"),"."),(0,i.kt)("p",{parentName:"li"},"For the specific content of the configuration refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/eaa8204fc7484df984b3c321624827ff.html"},"configuration guide"),"."),(0,i.kt)("p",{parentName:"li"},"Here is an example for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Single tenant in a trusted environment")," mode:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"deployment:\n  replicaCount: 1\n  image:\n    pullSecret: 'proxy-secret'\ningress:\n  tls:\n    secretName: 'connectivity-tls'\nconfig:\n  integration:\n    auditlog:\n      mode: console\n    connectivityService:\n      serviceCredentialsKey: 'connectivity_key'\n  tenantMode: dedicated\n  subaccountId: '<subaccount-id>'\n  subaccountSubdomain: '<subaccount-domain>'\n  servers:\n    businessDataTunnel:\n      externalHost: 'connectivitytunnel.ingress.<your-cluster-host>'\n      externalPort: 443\n    proxy:\n      rfcAndLdap:\n        enabled: true\n        enableProxyAuthorization: false\n      http:\n        enabled: true\n        enableProxyAuthorization: false\n        enableRequestTracing: true\n      socks5:\n        enableProxyAuthorization: false\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For your application to reach On-Premise destinations, it needs to provide the proxy settings and the token URL.\nCurrently, you have to add them manually to the ",(0,i.kt)("inlineCode",{parentName:"p"},"secret")," containing the connectivity service binding."),(0,i.kt)("p",{parentName:"li"},"To do this, use the following code snippet:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl edit secret <binding-name>\n")),(0,i.kt)("p",{parentName:"li"},"Now you have to add the fields ",(0,i.kt)("inlineCode",{parentName:"p"},"onpremise_proxy_host")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onpremise_proxy_port")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"url"),".\nThe host has the pattern ",(0,i.kt)("inlineCode",{parentName:"p"},"connectivity-proxy.<namespace>")," which is in our case ",(0,i.kt)("inlineCode",{parentName:"p"},"connectivity-proxy.default"),".\nThe default port is ",(0,i.kt)("inlineCode",{parentName:"p"},"20003"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," field should contain the same value as ",(0,i.kt)("inlineCode",{parentName:"p"},"token_service_url"),".\nBe aware that the values have to be encoded in base64, for example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"onpremise_proxy_host: Y29ubmVjdGl2aXR5LXByb3h5LmRlZmF1bHQ=\nonpremise_proxy_port: MjAwMDM=\nurl: aHR0cHM6Ly9teS1hcGkuYXV0aGVudGljYXRpb24uc2FwLmhhbmEub25kZW1hbmQuY29tCg==\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Finally, add the binding to your ",(0,i.kt)("inlineCode",{parentName:"p"},"deployment.yml"),", the same way you would add any other binding."))),(0,i.kt)("h2",{id:"excursion-debug-kubernetes-app-from-your-local-ide"},"Excursion: Debug Kubernetes App From Your Local IDE"),(0,i.kt)("p",null,"To understand some problems with an application it might be helpful to debug the application from within your IDE.\nThen you can go through the code step by step and see, where your expectations are not fulfilled anymore."),(0,i.kt)("p",null,"This excursion will guide you through the necessary steps to get your application running on your Kubernetes cluster connected to your local IDE."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the following parameter to your invocation of the JVM:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-text"},"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\n")),(0,i.kt)("p",{parentName:"li"},"As an example, let's assume that your Dockerfile has the following entrypoint:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'ENTRYPOINT ["java","-jar","/app.jar"]\n')),(0,i.kt)("p",{parentName:"li"},"Then you can update your deployment by adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"command")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," properties to your image spec in your deployment.yml:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"spec: # pod spec\n  containers:\n    - image: <your-image-spec>\n      name: <your-container-name>\n      command: ['java']\n      args:\n        [\n          '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005',\n          '-jar',\n          '/app.jar'\n        ]\n")),(0,i.kt)("p",{parentName:"li"},"This will replace the entrypoint with the given command and arguments, as described in the ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/"},"Kubernetes documentation"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make sure that the adjusted image is actually running in your Kubernetes Cluster.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Identify the pod you want to debug against, for example using the ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl get pods")," command.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Forward the port used in the debug String above via the following command to your local machine:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl port-forward <name-of-your-pod> 5005:5005\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Let your IDE connect against ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost:5005"),".\nThe specifics of this step depend heavily on your choice of IDE, so we cannot give a fits-all solution."))))}d.isMDXComponent=!0}}]);