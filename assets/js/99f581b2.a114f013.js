"use strict";(self.webpackChunksap_cloud_sdk_documentation=self.webpackChunksap_cloud_sdk_documentation||[]).push([[7466],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},27603:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={id:"kubernetes",title:"Migrate your App from SAP BTP CF to Kubernetes with the SAP Cloud SDK for JavaScript",sidebar_label:"Migrate to Kubernetes",description:"Learn how to migrate your application from SAP BTP Cloud Foundry to Kubernetes with the SAP Cloud SDK for JavaScript",keywords:["sap","cloud","sdk","cloud native","cloud sdk","sap cloud sdk","kubernetes"]},i="How to Migrate a Cloud Foundry Application to a Kubernetes Cluster",s={unversionedId:"guides/kubernetes",id:"guides/kubernetes",title:"Migrate your App from SAP BTP CF to Kubernetes with the SAP Cloud SDK for JavaScript",description:"Learn how to migrate your application from SAP BTP Cloud Foundry to Kubernetes with the SAP Cloud SDK for JavaScript",source:"@site/docs-js/guides/migrate-sdk-application-from-btp-cf-to-kubernetes.mdx",sourceDirName:"guides",slug:"/guides/kubernetes",permalink:"/cloud-sdk/docs/js/v3/guides/kubernetes",draft:!1,editUrl:"https://github.com/SAP/cloud-sdk/edit/main/docs-js/guides/migrate-sdk-application-from-btp-cf-to-kubernetes.mdx",tags:[],version:"current",frontMatter:{id:"kubernetes",title:"Migrate your App from SAP BTP CF to Kubernetes with the SAP Cloud SDK for JavaScript",sidebar_label:"Migrate to Kubernetes",description:"Learn how to migrate your application from SAP BTP Cloud Foundry to Kubernetes with the SAP Cloud SDK for JavaScript",keywords:["sap","cloud","sdk","cloud native","cloud sdk","sap cloud sdk","kubernetes"]},sidebar:"docsJsSidebar",previous:{title:"Shared ESLint configuration",permalink:"/cloud-sdk/docs/js/v3/features/eslint-configuration"},next:{title:"Connecting to External Systems from BAS",permalink:"/cloud-sdk/docs/js/v3/guides/bas"}},l={},c=[{value:"Simple PoC Environments",id:"simple-poc-environments",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Create and Bind Services",id:"create-and-bind-services",level:3},{value:"Staging Environments",id:"staging-environments",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"Configure the Service Manager",id:"configure-the-service-manager",level:3},{value:"Service Broker Registration",id:"service-broker-registration",level:3},{value:"Create and Bind Services",id:"create-and-bind-services-1",level:3},{value:"Production Environments",id:"production-environments",level:2},{value:"Prerequisites",id:"prerequisites-2",level:3},{value:"Configure Operator",id:"configure-operator",level:3},{value:"Create and Bind Services",id:"create-and-bind-services-2",level:3},{value:"Deploy to Kubernetes",id:"deploy-to-kubernetes",level:2},{value:"Example Application",id:"example-application",level:3},{value:"Dockerfile",id:"dockerfile",level:3},{value:"Deployment Configuration",id:"deployment-configuration",level:3},{value:"Deploy and Expose Your Application",id:"deploy-and-expose-your-application",level:3},{value:"Local Connection",id:"local-connection",level:3},{value:"Internet Facing Connection",id:"internet-facing-connection",level:3},{value:"Create a Continuous Integration Pipeline",id:"create-a-continuous-integration-pipeline",level:2},{value:"Configure TLS and Obtain a Domain in SAP Gardener",id:"configure-tls-and-obtain-a-domain-in-sap-gardener",level:2},{value:"Configure Basic Authentication",id:"configure-basic-authentication",level:2},{value:"On-Premise Connectivity",id:"on-premise-connectivity",level:2},{value:"Principal Propagation",id:"principal-propagation",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-migrate-a-cloud-foundry-application-to-a-kubernetes-cluster"},"How to Migrate a Cloud Foundry Application to a Kubernetes Cluster"),(0,o.kt)("p",null,"This how-to shows step-by-step what is necessary to migrate an application from Cloud Foundry to Kubernetes."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Decide what kind of environment you are creating.\nIs it a proof-of-concept (PoC), staging, or productive environment?"),(0,o.kt)("li",{parentName:"ol"},"Prepare and set up your cluster with the sufficient services and service bindings to satisfy the environment's requirements."),(0,o.kt)("li",{parentName:"ol"},"Adapt your application to deploy to Kubernetes and make sure it can consume bound services from within your Kubernetes cluster.")),(0,o.kt)("p",null,"Select the type of environment you're planning to build and click on it to jump to a corresponding section:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#simple-poc-environments"},"Simple PoC Environment"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If you want to create a PoC, this kind of environment will be sufficient for you.\nIt's not recommended for productive use or long-running PoCs."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#staging-environments"},"Staging Environments"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"For staging environments, you can create and bind services manually.\nThis is primarily meant to try out different service setups."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#production-environments"},"Production Environments"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"For production environments, you can create and bind services with reproducibility, longevity, and developer simplicity in mind.")))),(0,o.kt)("h2",{id:"simple-poc-environments"},"Simple PoC Environments"),(0,o.kt)("p",null,"For a simple PoC, you can create and bind services in Cloud Foundry, or preferably even use already existing service bindings."),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tools/"},(0,o.kt)("inlineCode",{parentName:"a"},"kubectl"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},(0,o.kt)("inlineCode",{parentName:"a"},"docker")))),(0,o.kt)("h3",{id:"create-and-bind-services"},"Create and Bind Services"),(0,o.kt)("p",null,"If you want to create and bind ",(0,o.kt)("em",{parentName:"p"},"new")," services, you can deploy a ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world")," app to SAP BTP Cloud Foundry and then bind services to this app.\nOnce that is done, access and copy the JSON representation of the bindings and create a secret in Kubernetes out of them."),(0,o.kt)("p",null,"The secret has to be in YAML format like in the example below.\nUse the values from service binding's JSON data to replace the corresponding value in the ",(0,o.kt)("inlineCode",{parentName:"p"},"stringData")," section of the YAML."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Secret\nmetadata:\n  name: destination-service\ntype: Opaque\nstringData:\n  clientid: YOUR_CLIENT_ID\n  clientsecret: YOUR_CLIENT_SECRET\n  url: YOUR_URL\n  identityzone: YOUR_IDENTITY_ZONE\n  tenantid: YOUR_TENANT_ID\n  tenantmode: YOUR_TENANT_MODE\n  verificationkey: YOUR_VERIFICATION_KEY\n  xsappname: YOUR_XS_APP_NAME\n  uaadomain: YOUR_UAA_DOMAIN\n  instanceid: YOUR_INSTANCE_ID\n  uri: YOUR_URI\n")),(0,o.kt)("p",null,"Once you are done, run ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f YOUR_BINDING.yml")," to create the secret in your cluster."),(0,o.kt)("p",null,"Now let's take a look at how you can adapt your application to deploy it to Kubernetes and how it can consume services from inside of a Kubernetes cluster.\nFor this jump over to the ",(0,o.kt)("a",{parentName:"p",href:"#deploy-to-kubernetes"},"Deploy to Kubernetes")," section."),(0,o.kt)("h2",{id:"staging-environments"},"Staging Environments"),(0,o.kt)("p",null,"For a staging environment where you want to try out different services or experiment with service configurations, it is fine to use the following setup."),(0,o.kt)("h3",{id:"prerequisites-1"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Peripli/service-manager-cli"},(0,o.kt)("inlineCode",{parentName:"a"},"smctl"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://svc-cat.io/docs/cli/"},(0,o.kt)("inlineCode",{parentName:"a"},"svcat"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},(0,o.kt)("inlineCode",{parentName:"a"},"helm"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tools/"},(0,o.kt)("inlineCode",{parentName:"a"},"kubectl"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},(0,o.kt)("inlineCode",{parentName:"a"},"docker")))),(0,o.kt)("h3",{id:"configure-the-service-manager"},"Configure the Service Manager"),(0,o.kt)("p",null,"First, create a service manager instance in Cloud Foundry with the ",(0,o.kt)("inlineCode",{parentName:"p"},"subaccount-admin")," plan."),(0,o.kt)("p",null,"To be able to create a service manager, you will need sufficient privileges in the SAP BTP Cloud Foundry.\nFollow the steps below to get them:"),(0,o.kt)("p",null,"In the SAP BTP cockpit, navigate to your ",(0,o.kt)("inlineCode",{parentName:"p"},"subaccount")," and choose ",(0,o.kt)("strong",{parentName:"p"},"Security \u2192 Trust Configuration \u2192 SAP ID Service"),'.\nAssign the "Subaccount Service Administrator" role collection to your email address.'),(0,o.kt)("p",null,"Next, you need to login to the service manager control, also called ",(0,o.kt)("inlineCode",{parentName:"p"},"smctl"),", and register your cluster"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"smctl login -a https://service-manager.YOUR_CF_API_ENDPOINT --param subdomain=YOUR_CF_SUBDOMAIN\nsmctl register-platform YOUR_CLUSTER_NAME kubernetes > service-manager-credentials.txt\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"service-manager-credentials.txt")," contains sensitive data, keep it in a safe place.\nYou will need the ",(0,o.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"password")," later on."),(0,o.kt)("h3",{id:"service-broker-registration"},"Service Broker Registration"),(0,o.kt)("p",null,"To make the services available in the Kubernetes cluster, you need to register a service broker into the Service Catalog of your Kubernetes cluster.\nIn SAP BTP Cloud Foundry the role of a service broker is fulfilled by the service manager.\nRegister it using the Service Catalog CLI, ",(0,o.kt)("inlineCode",{parentName:"p"},"svcat"),".\nTo access the service manager on SAP BTP CF, you need to install the ",(0,o.kt)("inlineCode",{parentName:"p"},"service-broker-proxy")," in your Kubernetes cluster."),(0,o.kt)("p",null,"Here's how you do it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add peripli 'https://peripli.github.io'\n\nkubectl create namespace service-broker-proxy\n\nhelm install service-broker-proxy peripli/service-broker-proxy-k8s \\\n  --namespace service-broker-proxy \\\n  --set image.tag=v0.3.2 \\\n  --set config.sm.url=YOUR_SERVICE_MANAGER_URL \\\n  --set sm.user=YOUR_SERVICE_MANAGER_USER \\\n  --set sm.password=YOUR_SERVICE_MANAGER_PASSWORD\n")),(0,o.kt)("p",null,"After installing the proxy you have to wait a few seconds until it is fully operational.\nOnce the proxy is up, try running ",(0,o.kt)("inlineCode",{parentName:"p"},"svcat marketplace"),", all the services available on SAP BTP CF should now be listed."),(0,o.kt)("h3",{id:"create-and-bind-services-1"},"Create and Bind Services"),(0,o.kt)("p",null,"Now you can create service instances with the service catalog.\nLet's create a destination service instance first."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"svcat provision destination-service --class destination --plan lite\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Notice how ",(0,o.kt)("inlineCode",{parentName:"p"},"destination-service")," is just the name you give to this particular service instance, it could be anything.")),(0,o.kt)("p",null,"Now you could also create an XSUAA service instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"svcat provision xsuaa-service --class xsuaa --plan broker\n")),(0,o.kt)("p",null,"Finally, you need to bind the services to make them available to your application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"svcat bind destination-service\nsvcat bind xsuaa-service\n")),(0,o.kt)("p",null,"Now let's take a look at how to adapt your application to deploy it to Kubernetes and make it consume services from inside of a Kubernetes cluster.\nFor this jump over to the ",(0,o.kt)("a",{parentName:"p",href:"#deploy-to-kubernetes"},"Deploy to Kubernetes")," section."),(0,o.kt)("h2",{id:"production-environments"},"Production Environments"),(0,o.kt)("p",null,"For production environments, you need a reliable and reproducible way of configuring which services are running in your cluster.\nTo achieve that you can leverage the service operator.\nWith the service operator, all services are deployed via YAML files.\nIt makes services management a lot easier, scalable, and protected from errors in a long-term production environment."),(0,o.kt)("h3",{id:"prerequisites-2"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},(0,o.kt)("inlineCode",{parentName:"a"},"helm"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tools/"},(0,o.kt)("inlineCode",{parentName:"a"},"kubectl"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},(0,o.kt)("inlineCode",{parentName:"a"},"docker"))),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("a",{parentName:"li",href:"https://dashboard.garden.canary.k8s.ondemand.com/"},"Gardener")," for a Kubernetes Cluster with a load balancer enabled")),(0,o.kt)("h3",{id:"configure-operator"},"Configure Operator"),(0,o.kt)("p",null,"To use the service operator, you'll need to set up at least basic TLS with a self-signed issuer certificate.\nRun the command below to install the ",(0,o.kt)("inlineCode",{parentName:"p"},"cert-manager")," to aid your TLS setup."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.4.0/cert-manager.yaml\n")),(0,o.kt)("p",null,"To deploy the ",(0,o.kt)("inlineCode",{parentName:"p"},"cert-manager")," into your cluster, install the ",(0,o.kt)("inlineCode",{parentName:"p"},"cert-manager")," ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/"},"CRDs")," with"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.4.0/cert-manager.crds.yaml\n")),(0,o.kt)("p",null,"Finally, add a self-signed certificate issuer to your cluster.\nIt can be done by adding the following YAML configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-cluster-issuer\nspec:\n  selfSigned: {}\n")),(0,o.kt)("p",null,"After you deployed the self-signed certificate issuer, you can start steps to deploy a service operator instance."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"First, you create a service manager instance in SAP BTP CF with the ",(0,o.kt)("inlineCode",{parentName:"li"},"service-operator-access")," plan."),(0,o.kt)("li",{parentName:"ul"},"After creating an instance you also need to bind it.\nThe binding JSON should look similar to this:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},' {\n     "clientid": "YOUR_CLIENT_ID",\n     "clientsecret": "YOUR_CLIENT_SECRET",\n     "url": "YOUR_URL",\n     "xsappname": "YOUR_XS_APP_NAME",\n     "sm_url": "YOUR_SERVICE_MANAGER_URL"\n }\n')),(0,o.kt)("p",null,"Once you have the data from the service manager's binding, provide it to the helm CLI and deploy the service operator.\nHelm is a package manager for Kubernetes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"helm upgrade --install sapbtp-operator https://github.com/SAP/sap-btp-service-operator/releases/download/YOUR_RELEASE/sapbtp-operator-YOUR_RELEASE.tgz \\\n    --create-namespace \\\n    --namespace=sapbtp-operator \\\n    --set manager.secret.clientid=YOUR_CLIENT_ID \\\n    --set manager.secret.clientsecret=YOUR_CLIENT_SECRET \\\n    --set manager.secret.url=YOUR_SERVICE_MANAGER_URL \\\n    --set manager.secret.tokenurl=YOUR_URL\n")),(0,o.kt)("h3",{id:"create-and-bind-services-2"},"Create and Bind Services"),(0,o.kt)("p",null,"Now that the service operator is running in your cluster, you can create services just like you would do in SAP BTP CF, but instead of the SAP BTP cockpit, you'll use YAML service definitions."),(0,o.kt)("p",null,"Here is an example of creating and binding a ",(0,o.kt)("strong",{parentName:"p"},"Destination")," service:"),(0,o.kt)("p",null,"Creating an instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: services.cloud.sap.com/v1alpha1\nkind: ServiceInstance\nmetadata:\n  name: operator-destination-service\nspec:\n  serviceOfferingName: destination\n  servicePlanName: lite\n")),(0,o.kt)("p",null,"Binding the instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: services.cloud.sap.com/v1alpha1\nkind: ServiceBinding\nmetadata:\n  name: operator-destination-service\nspec:\n  serviceInstanceName: operator-destination-service\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Notice that the ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata -> name")," property can be anything you want.\nIn this case, it's ",(0,o.kt)("inlineCode",{parentName:"p"},"operator-destination-service"),".\nMake sure it matches exactly to the ",(0,o.kt)("inlineCode",{parentName:"p"},"spec -> serviceInstanceName")," field in the binding.")),(0,o.kt)("p",null,"Follow this pattern for all services your application needs to create and bind."),(0,o.kt)("p",null,"Now let's take a look at how to adapt your application to deploy it to Kubernetes and make it consume services from inside of a Kubernetes cluster.\nFor this jump over to the ",(0,o.kt)("a",{parentName:"p",href:"#deploy-to-kubernetes"},"Deploy to Kubernetes")," section."),(0,o.kt)("h2",{id:"deploy-to-kubernetes"},"Deploy to Kubernetes"),(0,o.kt)("p",null,"To deploy an application to Kubernetes you have to take a look at two things:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"How to deploy your application to Kubernetes."),(0,o.kt)("li",{parentName:"ol"},"How to consume the services in your application from within Kubernetes.\nThe example application will demonstrate this.")),(0,o.kt)("h3",{id:"example-application"},"Example Application"),(0,o.kt)("p",null,"Here's the example application you are going to use: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SAP-samples/cloud-sdk-js/tree/main/samples/k8s-sample-application"},"Kubernetes app"),".\nTo figure out what has to be migrated, you have to take a look at the ",(0,o.kt)("inlineCode",{parentName:"p"},"manifest.yml"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"applications:\n  - name: k8s-e2e-app\n    path: deployment/\n    buildpacks:\n      - nodejs_buildpack\n    memory: 256M\n    command: npm run start:prod\n    random-route: true\n    services:\n      - destination-service\n      - xsuaa-service\n")),(0,o.kt)("p",null,"The configuration specifies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A node environment"),(0,o.kt)("li",{parentName:"ul"},"256MB of memory"),(0,o.kt)("li",{parentName:"ul"},"Command to start the app"),(0,o.kt)("li",{parentName:"ul"},"Services needed to create and bind")),(0,o.kt)("p",null,"This information is important in the following steps."),(0,o.kt)("h3",{id:"dockerfile"},"Dockerfile"),(0,o.kt)("p",null,"Kubernetes Pods are running container images.\nYou will a ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," defining a container for your example application.\nThen it can be deployed to one or more Kubernetes Pods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:12-alpine\n\nWORKDIR /workdir\n\nCOPY /deployment /workdir\n\nRUN ["npm", "install", "--unsafe-perm"]\n\nEXPOSE 3000\nCMD ["npm", "run", "start:prod"]\n')),(0,o.kt)("p",null,"You can see that your ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," reflects the information from the ",(0,o.kt)("inlineCode",{parentName:"p"},"manifest.yml"),".\nYou specify Node.js as an environment, ",(0,o.kt)("inlineCode",{parentName:"p"},"/deployment")," as a path to copy the application to, and the command to run when the container image is fully loaded."),(0,o.kt)("h3",{id:"deployment-configuration"},"Deployment Configuration"),(0,o.kt)("p",null,"Next, you need to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"deployment.yml")," file, that contains the following data:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"resources definition your application needs"),(0,o.kt)("li",{parentName:"ul"},"container image, as well as registry secrets (in case your image was pushed to a private repository)"),(0,o.kt)("li",{parentName:"ul"},"service bindings you previously created")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sdkjs-e2e-deployment\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: sdkjs-e2e\n  template:\n    metadata:\n      labels:\n        app: sdkjs-e2e\n    spec:\n      containers:\n        - name: sdkjs-e2e\n          image: docker-cloudsdk.docker.repositories.sap.ondemand.com/k8s-e2e-app:latest\n          resources:\n            requests:\n              memory: '256Mi'\n              cpu: '500m'\n            limits:\n              memory: '512Mi'\n              cpu: '1000m'\n          ports:\n            - containerPort: 3000\n          volumeMounts:\n            - name: destination-volume\n              mountPath: '/etc/secrets/sapcp/destination/operator-destination-service'\n              readOnly: true\n            - name: xsuaa-volume\n              mountPath: '/etc/secrets/sapcp/xsuaa/operator-xsuaa-service'\n              readOnly: true\n      imagePullSecrets:\n        - name: regcred\n      volumes:\n        - name: destination-volume\n          secret:\n            secretName: operator-destination-service\n        - name: xsuaa-volume\n          secret:\n            secretName: operator-xsuaa-service\n")),(0,o.kt)("p",null,"You know from the ",(0,o.kt)("inlineCode",{parentName:"p"},"manifest.yml")," file that the app needs 256MB of RAM on SAP BTP CF.\nYou can use it as guidance for Kubernetes by adding it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"requests")," field.\nWith Kubernetes, you can allow the resources to scale by also providing the ",(0,o.kt)("inlineCode",{parentName:"p"},"limits")," field which in this case allows extending RAM up to 512MB."),(0,o.kt)("p",null,"Notice that the config uses ",(0,o.kt)("inlineCode",{parentName:"p"},"imagePullSecrets"),", which is using the ",(0,o.kt)("inlineCode",{parentName:"p"},"regcred")," secret.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"regcred")," secret contains your own registry credentials that you previously bound as a secret.\nYou can do this either by writing a ",(0,o.kt)("inlineCode",{parentName:"p"},"secret.yml")," or directly in the CLI (though this will be in your ",(0,o.kt)("inlineCode",{parentName:"p"},".bashrc")," file) like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret docker-registry regcred \\\n  --docker-username=YOUR_DOCKER_USERNAME \\\n  --docker-password=YOUR_DOCKER_PASSWORD \\\n  --docker-email=YOUR_DOCKER_EMAIL\n")),(0,o.kt)("p",null,"Finally, notice how you mount every service which you also had in the ",(0,o.kt)("inlineCode",{parentName:"p"},"manifest.yml")," file, in this case, a ",(0,o.kt)("strong",{parentName:"p"},"Destination")," service and an ",(0,o.kt)("strong",{parentName:"p"},"XSUAA")," service.\nTo do this you use the ",(0,o.kt)("inlineCode",{parentName:"p"},"volumes")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"volumeMounts")," properties."),(0,o.kt)("p",null,"The structure for the ",(0,o.kt)("inlineCode",{parentName:"p"},"volumes")," property is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"volumes:\n  - name: YOUR_VOLUME_NAME\n    secret:\n      secretName: YOUR_SERVICE_BINDING\n")),(0,o.kt)("p",null,"Here you create a secret, in this case, a service binding, available as a volume.\nNext, you need to mount this secret at a specific path for it to be usable by the application.\nFor this, you follow a path convention provided by the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@sap/xsenv"},"xsenv")," library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"volumeMounts:\n  - name: YOUR_VOLUMNE_NAME\n    mountPath: '/etc/secrets/sapcp/YOUR_SERVICE/YOUR_SERVICE_NAME'\n    readOnly: true\n")),(0,o.kt)("h3",{id:"deploy-and-expose-your-application"},"Deploy and Expose Your Application"),(0,o.kt)("p",null,"To deploy your application, run:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply -f deployment.yml")),(0,o.kt)("p",null,"To access your application you have two options, either you expose it to the internet directly or port-forward to your local machine."),(0,o.kt)("h3",{id:"local-connection"},"Local Connection"),(0,o.kt)("p",null,"Run the command ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl port-forward deployment YOUR_DEPLOYMENT :3000")," on your local machine to enable port forwarding.\nYour application will listen to port 3000.\nKubernetes finds an available port on your local machine and forwards port 3000 of your deployment to it.\nThen you'll be able to make a call to your application via a provided link."),(0,o.kt)("h3",{id:"internet-facing-connection"},"Internet Facing Connection"),(0,o.kt)("p",null,"Run the command below to expose your application to the internet.\nIt will use your cluster's IP address and port your application listens on."),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Exposing an application this way is good only for testing.\n",(0,o.kt)("strong",{parentName:"p"},"Don't use it in production."))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'kubectl expose deployment YOUR_DEPLOYMENT --type="LoadBalancer"')),(0,o.kt)("p",null,"If you want to expose your cluster under Domain name with TLS and/or basic authentication check out the ",(0,o.kt)("a",{parentName:"p",href:"#configure-tls-and-obtain-a-domain-in-sap-gardener"},"Configure TLS and obtain a Domain in SAP Gardener")," part for an SAP Gardener setup or the official Kubernetes ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/"},"documentation")," for a general setup."),(0,o.kt)("h2",{id:"create-a-continuous-integration-pipeline"},"Create a Continuous Integration Pipeline"),(0,o.kt)("p",null,"You can create a simple CI/CD pipeline with GitHub Actions or change your existing pipeline.\nTo automatically deploy your application into the Kubernetes cluster, two things are needed:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Automatic build the container image and deploy into the container repository"),(0,o.kt)("li",{parentName:"ol"},"Automatic re-start of the Kubernetes Deployment")),(0,o.kt)("p",null,"Step (1) can be achieved by building and pushing the container image with a technical user.\nFor Step (2) you need a technical user that is entitled to manage the cluster deployment."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/"},"Create a service account")," in your cluster."),(0,o.kt)("li",{parentName:"ol"},"Bind the ",(0,o.kt)("inlineCode",{parentName:"li"},"cluster-admin")," cluster role to the service account.\nAlternative, create a more strict role."),(0,o.kt)("li",{parentName:"ol"},"Obtain the token and CA certificate from the secret that is automatically created for that service account."),(0,o.kt)("li",{parentName:"ol"},"Obtain the cluster API endpoint via command ",(0,o.kt)("inlineCode",{parentName:"li"},"kubectl cluster-info"),".")),(0,o.kt)("p",null,"You can now use the service account in your automation to connect to the cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl config set-cluster gardener --server=YOUR_CLUSTER_API_ENDPOINT\nkubectl config set-context gardener --cluster=gardener\nkubectl config use-context gardener\nkubectl config view\nkubectl --token=${{ secrets.KUBERNETES_SERVICE_TOKEN }} --certificate-authority YOUR_CA_CERT_PATH cluster-info\n")),(0,o.kt)("p",null,"After completing the previous steps, run the command below.\nIt shutdowns all the Pods to restart them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --token=${{ secrets.KUBERNETES_SERVICE_TOKEN }} --certificate-authority YOUR_CA_CERT_PATH rollout restart deployment/YOUR_DEPLOYMENT\n")),(0,o.kt)("p",null,"If your Deployment is configured with ",(0,o.kt)("inlineCode",{parentName:"p"},"ImagePullStrategy: Always"),", it will pull the updated image and use it."),(0,o.kt)("h2",{id:"configure-tls-and-obtain-a-domain-in-sap-gardener"},"Configure TLS and Obtain a Domain in SAP Gardener"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Prerequisite:")," Enable the NGINX Ingress add-on for your SAP Gardener cluster."),(0,o.kt)("p",null,"The fastest way to enable TLS and obtain a domain for your application is to create a Service, which contains your Deployment, and an Ingress, which handles the routing.\nIn SAP Gardener you can already specify your desired domain and the TLS will be managed for you, more on that later."),(0,o.kt)("p",null,"Create a Service that contains your Deployment and the port you want to expose as in example below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: sdkjs-e2e-svc\nspec:\n  selector:\n    app: sdkjs-e2e\n  ports:\n    - port: 8080\n      targetPort: 3000\n")),(0,o.kt)("p",null,"Next, check your Shoot cluster's ",(0,o.kt)("inlineCode",{parentName:"p"},"kubeconfig.yaml")," for the configured DNS.\nThe Shoot cluster's ",(0,o.kt)("inlineCode",{parentName:"p"},"kubeconfig.yaml")," should be located in your Gardener project's dashboard, under the YAML tab.\nIt should be a field that looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  dns:\n    domain: cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n")),(0,o.kt)("p",null,"Since you have the NGINX Ingress enabled, all your domains have to follow the pattern ",(0,o.kt)("inlineCode",{parentName:"p"},"*.ingress.YOUR_DNS"),", for example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n")),(0,o.kt)("p",null,"This is how your Ingress configuration file should look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: sdkjs-e2e-ingress\n  annotations:\n    cert.gardener.cloud/purpose: managed\nspec:\n  tls:\n    - hosts:\n        - cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n        - e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n      secretName: secret-tls\n  rules:\n    - host: e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: sdkjs-e2e-svc\n                port:\n                  number: 8080\n")),(0,o.kt)("p",null,"Notice how your Ingress uses the SAP Gardener annotations, which is important so that SAP Gardener manages TLS."),(0,o.kt)("p",null,"Next, you can see in the ",(0,o.kt)("inlineCode",{parentName:"p"},"spec.tls.hosts")," part that it expose 2 domains.\nThe first one is your default domain, it's limited to a maximum of 64 characters.\nOther domains can be any size, but should follow the Ingress pattern."),(0,o.kt)("p",null,"Notice the field ",(0,o.kt)("inlineCode",{parentName:"p"},"secretName: secret-tls")," in this configuration.\nAll TLS certificates will be saved by SAP Gardener.\nFinally look at how to serve the Service at the root of your subdomain.\nThis way the Service is exposed to the internet."),(0,o.kt)("p",null,"After a short delay, you should be able to access the mentioned domains via a valid TLS."),(0,o.kt)("h2",{id:"configure-basic-authentication"},"Configure Basic Authentication"),(0,o.kt)("p",null,"In case your application doesn't have built-in authentication, you can add basic authentication in front of the Ingress with the following steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a ",(0,o.kt)("inlineCode",{parentName:"li"},"htpasswd")," file")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"htpasswd -c auth username\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Create a secret out of this file")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret generic YOUR_SECRET --from-file=auth\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Add annotations to the Ingress.\nFor your example, it should look like the following:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: sdkjs-e2e-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/auth-type: basic\n    nginx.ingress.kubernetes.io/auth-secret: ingress-gate-auth\n    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - This services is protected.'\n    cert.gardener.cloud/purpose: managed\nspec:\n  tls:\n    - hosts:\n        - cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n        - e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n      secretName: secret-tls\n  rules:\n    - host: e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: sdkjs-e2e-svc\n                port:\n                  number: 8080\n")),(0,o.kt)("p",null,"Notice how ",(0,o.kt)("inlineCode",{parentName:"p"},"ingress-gate-auth")," is the name of the secret containing your password.\nThe text following the annotation ",(0,o.kt)("inlineCode",{parentName:"p"},"nginx.ingress.kubernetes.io/auth-realm:")," contains a message, which is prompted when asking for credentials for the basic authentication.\nYour basic authentication should now work.\nAccessing any path should open an authentication window."),(0,o.kt)("h2",{id:"on-premise-connectivity"},"On-Premise Connectivity"),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"On-Premise connectivity in Kubernetes is not available for SAP customers as of November 2022.")),(0,o.kt)("p",null,"To connect to on-premise systems inside a Kubernetes cluster, you need to use the connectivity proxy.\nThe following guide will show you what has to be done to create and use it."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You need to create a route for the connectivity proxy to use.\nThis route needs to have TLS enabled.\nTo enable TLS on SAP Gardener, refer to ",(0,o.kt)("a",{parentName:"li",href:"#configure-tls-and-obtain-a-domain-in-sap-gardener"},"configure TLS and obtain a domain in SAP Gardener")," section.\nIf your cluster is not backed by SAP Gardener, refer to the official ",(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/"},"Kubernetes documentation"),".")),(0,o.kt)("p",null,"This example shows how to add a custom domain ",(0,o.kt)("inlineCode",{parentName:"p"},"connectivitytunnel.*")," to the TLS section in SAP Gardener.\nThis creates a certificate for this domain automatically."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  tls:\n    - hosts:\n        - cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n        - e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n        - connectivitytunnel.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n      secretName: secret-tls\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Add your CA certificate to the JVM trust store of the cloud connector.\nThe CA certificate is stored in the TLS secret, in this case the name is ",(0,o.kt)("inlineCode",{parentName:"li"},"secret-tls"),".")),(0,o.kt)("p",null,"To access the information inside a secret, use the following code snippet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl get secret YOUR_SECRET -o go-template=\'{{range $k,$v := .data}}{{printf "%s: " $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{"\\n"}}{{end}}\'\n')),(0,o.kt)("p",null,"Inside the secret should be a block prefixed with ",(0,o.kt)("inlineCode",{parentName:"p"},"ca.crt"),", copy this certificate into a file and then follow ",(0,o.kt)("a",{parentName:"p",href:"https://connect2id.com/blog/importing-ca-root-cert-into-jvm-trust-store"},"this guide")," to add it to the JVM trust store of your cloud connector."),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Create and bind the connectivity service with the ",(0,o.kt)("inlineCode",{parentName:"li"},"connectivty_proxy")," plan.\nThis guide explains how to do it above.\nAdditionally, to bind the secret represented by Kubernetes native YAML format, you need to convert it to a JSON to be consumable by the connectivity proxy.\nIf you use the PoC environment, save the binding as a secret, use the example below to guide you.\nOtherwise, you need to retrieve the binding first and then convert it to JSON before saving it as a secret.\nFor that you need to retrieve the secret's content first, you can use the previous code snippet to retrieve the values of a secret for that.")),(0,o.kt)("p",null,"Then save the JSON as a secret, here is an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: connectivity-proxy-service-key\ntype: Opaque\nstringData:\n  connectivity_key: \'{\n    "clientid": "YOUR_CLIENT_ID",\n    "clientsecret": "YOUR_CLIENT_SECRET",\n    "xsappname": "YOUR_XS_APP_NAME",\n    "connectivity_service": {\n        "CAs_path":"/api/v1/CAs",\n        "CAs_signing_path":"/api/v1/CAs/signing",\n        "api_path":"/api/v1",\n        "tunnel_path":"/api/v1/tunnel",\n        "url":"https://connectivity.cf.sap.hana.ondemand.com"\n    },\n    "subaccount_id": "YOUR_SUBACCOUNT_ID",\n    "subaccount_subdomain": "YOUR_SUBACCOUNT_SUBDOMAIN",\n    "token_service_domain": "YOUR_TOKEN_SERVICE_DOMAIN",\n    "token_service_url": "YOUR_TOKEN_SERVICE_URL",\n    "token_service_url_pattern": "https://{tenant}.authentication.sap.hana.ondemand.com/oauth/token",\n    "token_service_url_pattern_tenant_key": "subaccount_subdomain"\n}\'\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Note that the example used the ",(0,o.kt)("inlineCode",{parentName:"p"},"stringData")," field type instead of the default ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," field type to benefit from automatic base64 encoding, instead of doing it ourselves.\nThis is a requirement of the connectivity proxy since it can't consume the data of the secret in YAML format.")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Download the CA certificate of the connectivity service and create a secret containing:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the CA certificate of the connectivity service"),(0,o.kt)("li",{parentName:"ul"},"your private key"),(0,o.kt)("li",{parentName:"ul"},"your public certificate")),(0,o.kt)("p",null,"The private key and public certificate are also stored in your TLS secret, use the previous code snippet to retrieve it from the secret and save them in separate files.\nFinally, download the CA certificate with the following line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://connectivity.cf.sap.hana.ondemand.com/api/v1/CAs/signing -o connectivity_ca.crt\n")),(0,o.kt)("p",null,"Now you can create the secret with this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret generic connectivity-tls --from-file=ca.crt=YOUR_CONNECTIVITY_CA_KEY.crt --from-file=tls.key=YOUR_PRIVATE_KEY.key --from-file=tls.crt=YOUR_PUBLIC_KEY.crt --namespace default\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Create a secret that contains credentials to access the docker image which the connectivity proxy is using.")),(0,o.kt)("p",null,"The image is located here: ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy-releases.docker.repositories.sap.ondemand.com")),(0,o.kt)("p",null,"To create the registry secret, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret docker-registry YOUR_REGISTRY_SECRET \\\n  --docker-username=YOUR_DOCKER_USERNAME \\\n  --docker-password=YOUR_DOCKER_PASSWORD \\\n  --docker-server=deploy-releases.docker.repositories.sap.ondemand.com\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Create a ",(0,o.kt)("inlineCode",{parentName:"li"},"values.yaml")," file containing the configuration that suits your desired operational mode of the connectivity proxy, for the available operational modes refer to the ",(0,o.kt)("a",{parentName:"li",href:"https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/f3c1ef45db77489c8d039acc9530358f.html"},"documentation"),".\nFor the specific content of the configuration refer to the ",(0,o.kt)("a",{parentName:"li",href:"https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/eaa8204fc7484df984b3c321624827ff.html"},"configuration guide"),".")),(0,o.kt)("p",null,'Here is an example for the "single tenant in a trusted environment" mode:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"deployment:\n  replicaCount: 1\n  image:\n    pullSecret: 'proxy-secret'\ningress:\n  tls:\n    secretName: 'connectivity-tls'\nconfig:\n  integration:\n    auditlog:\n      mode: console\n    connectivityService:\n      serviceCredentialsKey: 'connectivity_key'\n  tenantMode: dedicated\n  subaccountId: 'YOUR_SUBACCOUNT_ID'\n  subaccountSubdomain: 'YOUR_SUBACCOUNT_SUBDOMAIN'\n  servers:\n    businessDataTunnel:\n      externalHost: 'connectivitytunnel.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com'\n      externalPort: 443\n    proxy:\n      rfcAndLdap:\n        enabled: true\n        enableProxyAuthorization: false\n      http:\n        enabled: true\n        enableProxyAuthorization: false\n        enableRequestTracing: true\n      socks5:\n        enableProxyAuthorization: false\n")),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},"For your application to reach on-premise destinations, it needs to provide the proxy settings and the token URL.\nYou have to add them manually to the ",(0,o.kt)("inlineCode",{parentName:"li"},"secret")," containing the service binding.")),(0,o.kt)("p",null,"To do this, use the following code snippet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl edit secret YOUR_BINDING\n")),(0,o.kt)("p",null,"Now you have to add the fields ",(0,o.kt)("inlineCode",{parentName:"p"},"onpremise_proxy_host")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"onpremise_proxy_port")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"url"),".\nThe host has the pattern ",(0,o.kt)("inlineCode",{parentName:"p"},"connectivity-proxy.YOUR_NAMESPACE")," which in this case is ",(0,o.kt)("inlineCode",{parentName:"p"},"connectivity-proxy.default"),".\nThe default port is ",(0,o.kt)("inlineCode",{parentName:"p"},"20003"),".\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"url")," field should contain the same value as ",(0,o.kt)("inlineCode",{parentName:"p"},"token_service_url"),".\nBe aware that the values have to be encoded in base64, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"onpremise_proxy_host: Y29ubmVjdGl2aXR5LXByb3h5LmRlZmF1bHQ=\nonpremise_proxy_port: MjAwMDM=\nurl: aHR0cHM6Ly9teS1hcGkuYXV0aGVudGljYXRpb24uc2FwLmhhbmEub25kZW1hbmQuY29tCg==\n")),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},"Finally, add the binding to your ",(0,o.kt)("inlineCode",{parentName:"li"},"deployment.yml"),", the same way you would add any other binding.")),(0,o.kt)("h2",{id:"principal-propagation"},"Principal Propagation"),(0,o.kt)("p",null,"You can use the Application Router also known as ",(0,o.kt)("inlineCode",{parentName:"p"},"approuter")," to propagate a principal in Kubernetes and achieve multi-tenancy.\nIt works in a similar fashion to SAP BTP Cloud Foundry."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You need an XSUAA instance that can redirect to a Kubernetes URI.\nThe parameter ",(0,o.kt)("inlineCode",{parentName:"li"},"redirect-uris")," is important, however, if you use one parameter while creating a Service, you have to use all.")),(0,o.kt)("p",null,"Below is an example using the SAP BTP Operator, to create an XSUAA with a very generic rule specifying the allowed URI with wildcards ",(0,o.kt)("inlineCode",{parentName:"p"},"https://*/**"),".\nFor your application, it is recommended to point directly at your specific URI."),(0,o.kt)("p",null,"If you are not using the SAP BTP Operator, you still have to provide the same parameters but in a different format.\nIn Cloud Foundry, for instance, you have to provide these parameters in JSON format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: services.cloud.sap.com/v1alpha1\nkind: ServiceInstance\nmetadata:\n  name: operator-xsuaa-service\nspec:\n  serviceOfferingName: xsuaa\n  servicePlanName: application\n  parameters:\n    xsappname: kubernetes-xsuaa\n    tenant-mode: dedicated\n    scopes:\n      - name: '$XSAPPNAME.Callback'\n        description: 'With this scope set, the callbacks for tenant onboarding, offboarding and getDependencies can be called.'\n        grant-as-authority-to-apps:\n          - $XSAPPNAME(application,sap-provisioning,tenant-onboarding)\n    role-templates:\n      - name: TOKEN_EXCHANGE\n        description: Token exchange\n        scope-references:\n          - uaa.user\n      - name: 'MultitenancyCallbackRoleTemplate'\n        description: 'Call callback-services of applications'\n        scope-references:\n          - '$XSAPPNAME.Callback'\n    oauth2-configuration:\n      grant-types:\n        - authorization_code\n        - client_credentials\n        - password\n        - refresh_token\n        - urn:ietf:params:oauth:grant-type:saml2-bearer\n        - user_token\n        - client_x509\n        - urn:ietf:params:oauth:grant-type:jwt-bearer\n      redirect-uris:\n        - https://*/**\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Package the application router as a docker image so that it can run in Kubernetes, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://blogs.sap.com/2020/04/03/sap-application-router/"},"documentation")," for configuration details.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"After creating a container image, create a Kubernetes Deployment and a Kubernetes Service to run and expose the application router.\nBelow are two examples for an application router, a Pod and a Service."))),(0,o.kt)("p",null,"First the Deployment:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: approuter\n  labels:\n    app: approuter\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: approuter\n  template:\n    metadata:\n      labels:\n        app: approuter\n    spec:\n      containers:\n        - image: docker-cloudsdk.docker.repositories.sap.ondemand.com/k8s-approuter:latest\n          resources:\n            requests:\n              memory: '256Mi'\n              cpu: '250m'\n            limits:\n              memory: '512Mi'\n              cpu: '500m'\n          name: approuter\n          volumeMounts:\n            - name: xsuaa-volume\n              mountPath: '/etc/secrets/sapcp/xsuaa/operator-xsuaa-service'\n              readOnly: true\n          env:\n            - name: PORT\n              value: '5000'\n            - name: destinations\n              value: '[{\"name\":\"backend\", \"url\":\"http://sdkjs-e2e-svc:8080/\", \"forwardAuthToken\": true}]'\n      imagePullSecrets:\n        - name: regcred\n      volumes:\n        - name: xsuaa-volume\n          secret:\n            secretName: operator-xsuaa-service\n")),(0,o.kt)("p",null,"This example mounts the XSUAA service the same way as you do for apps using the SAP Cloud SDK.\nIt references the application running in your cluster.\nInstead of an Ingress endpoint, it directly points at the Service.\nThis is possible because the application router runs in your cluster and can therefore use the Kubernetes native service discovery."),(0,o.kt)("p",null,"The Service configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: approuter-svc\n  labels:\n    app: approuter\nspec:\n  ports:\n    - port: 8080\n      targetPort: 5000\n  selector:\n    app: approuter\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, configure the Ingress to create a session cookie that is consumed by the application router and point it at the ",(0,o.kt)("inlineCode",{parentName:"p"},"approuter")," Service.\nTo secure your application, remove all previous routes that pointed at your application's endpoints and only expose them through the application router.\nThis way only users authenticated by your Identity Provider can access these endpoints.\nFor that, specify the Service names in your approuter destinations' configuration and remove the rules you previously created for these endpoints in the Ingress."),(0,o.kt)("p",{parentName:"li"},"Depending on the Ingress controller you have to use different annotations.\nFor the NGINX Ingress controller use the following annotations:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"nginx.ingress.kubernetes.io/affinity: cookie\nnginx.ingress.kubernetes.io/proxy-read-timeout: '600'\nnginx.ingress.kubernetes.io/session-cookie-name: JSESSIONID\n")),(0,o.kt)("p",null,"An Ingress that only exposes the application router and is using the annotations is shown in the following example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: sdkjs-e2e-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/affinity: 'cookie'\n    nginx.ingress.kubernetes.io/proxy-read-timeout: '600'\n    nginx.ingress.kubernetes.io/session-cookie-name: 'JSESSIONID'\n    cert.gardener.cloud/purpose: managed\nspec:\n  tls:\n    - hosts:\n        - cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n        - e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n        - connectivitytunnel.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n      secretName: secret-tls\n  rules:\n    - host: e2e.ingress.cloud-sdk-js.sdktests.shoot.canary.k8s-hana.ondemand.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: approuter-svc\n                port:\n                  number: 8080\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Be aware that just like in SAP BTP Cloud Foundry, you have to collect the principal's JSON web token (JWT) from the authentication header after executing one of the requests with the typed client libraries.\nHere is an example utilizing the ",(0,o.kt)("inlineCode",{parentName:"li"},"retrieveJwt()")," function:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Injectable } from '@nestjs/common';\nimport { retrieveJwt } from '@sap-cloud-sdk/connectivity';\nimport { Request } from 'express';\nimport { businessPartnerService } from './generated/business-partner-service';\n\n@Injectable()\nexport class PrincipalBusinessPartnerService {\n  async getFiveBusinessPartners(request: Request): Promise<BusinessPartner[]> {\n    return BusinessPartner.requestBuilder()\n      .getAll()\n      .top(5)\n      .execute({\n        destinationName: 'MY-DESTINATION',\n        jwt: retrieveJwt(request)\n      });\n  }\n}\n")))}u.isMDXComponent=!0}}]);