"use strict";(self.webpackChunksap_cloud_sdk_documentation=self.webpackChunksap_cloud_sdk_documentation||[]).push([[1884],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},16062:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var a=n(87462),o=(n(67294),n(3905)),r=n(50941),i=n(44996);const l={id:"middleware",title:"Middleware",sidebar_label:"Middleware",description:"How the SAP Cloud SDK behaviour is adjusted using middlewares.",keywords:["sap","cloud","sdk","JavaScript","TypeScript","resilience","middleware"]},s=void 0,d={unversionedId:"features/middleware",id:"features/middleware",title:"Middleware",description:"How the SAP Cloud SDK behaviour is adjusted using middlewares.",source:"@site/docs-js/features/middleware.mdx",sourceDirName:"features",slug:"/features/middleware",permalink:"/cloud-sdk/docs/js/features/middleware",draft:!1,editUrl:"https://github.com/SAP/cloud-sdk/edit/main/docs-js/features/middleware.mdx",tags:[],version:"current",frontMatter:{id:"middleware",title:"Middleware",sidebar_label:"Middleware",description:"How the SAP Cloud SDK behaviour is adjusted using middlewares.",keywords:["sap","cloud","sdk","JavaScript","TypeScript","resilience","middleware"]},sidebar:"docsJsSidebar",previous:{title:"Send e-mails",permalink:"/cloud-sdk/docs/js/features/mail-client/"},next:{title:"Error Handling",permalink:"/cloud-sdk/docs/js/features/error-handling"}},u={},c=[{value:"Concept",id:"concept",level:2},{value:"Implementation of a Middleware",id:"implementation-of-a-middleware",level:2},{value:"Order of Multiple Middlewares",id:"order-of-multiple-middlewares",level:2},{value:"Use the Middleware Context",id:"use-the-middleware-context",level:2},{value:"Change Request Parameters",id:"change-request-parameters",level:2},{value:"Execution Order of Middlewares",id:"execution-order-of-middlewares",level:2},{value:"Benefits of Middlewares",id:"benefits-of-middlewares",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"concept"},"Concept"),(0,o.kt)("p",null,"The main purpose of the SAP Cloud SDK is to execute asynchronous HTTP requests.\nThis can either happen via a generated ",(0,o.kt)("a",{parentName:"p",href:"./odata/execute-request#setting-middlewares"},"OData")," or ",(0,o.kt)("a",{parentName:"p",href:"./openapi/execute-request#setting-middlewares"},"OpenAPI")," client or the ",(0,o.kt)("a",{parentName:"p",href:"./connectivity/http-client#setting-middlewares"},"http client"),".\nThe examples presented in this guide use the http client, but all information applies to the typed clients as well.\nEither way, the final result after fetching destinations and doing various other things is an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"axios")," request.\nSometimes you want to adjust the way the SAP Cloud SDK executes the axios request."),(0,o.kt)("p",null,"With middlewares you can add custom functionality to the request execution.\nYou can add multiple middlewares to adjust requests to your needs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"executeHttpRequest(\n  { url: 'http://example.com' },\n  {\n    middleware: [middlewareA, middlewareB, ...],\n    method: 'get'\n  }\n);\n")),(0,o.kt)("p",null,"The API for a middleware is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Type defining the function passed from one middleware to the next one.\n */\nexport type MiddlewareFunction = (\n  request: HttpRequest\n) => Promise<HttpResponse>;\n\n/**\n * The actual middleware type returning a function.\n */\nexport type Middleware = (options: MiddlewareOptions) => MiddlewareFunction;\n\n/**\n * The input options of the middleware.\n */\nexport interface MiddlewareOptions {\n  fn: MiddlewareFunction;\n  context: HttpMiddlewareContext;\n}\n")),(0,o.kt)("p",null,"Every middleware takes the ",(0,o.kt)("inlineCode",{parentName:"p"},"MiddlewareOptions")," as input and returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"MiddlewareFunction")," instance.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"MiddlewareOptions")," have the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"fn()")," function is the returned function from the previous middleware.\nFor the last one it is the original HTTP request from the SAP Cloud SDK.\nNote that the type of the input and return function are the same."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"context")," provides information on the request like URL, headers and HTTP method.")),(0,o.kt)("p",null,"Note that a middleware should ",(0,o.kt)("strong",{parentName:"p"},"not")," execute the function but construct and return a ",(0,o.kt)("inlineCode",{parentName:"p"},"MiddlewareFunction"),".\nYou can think of middlewares as a composition of functions where each middleware composes a new function.\nThis makes a chain of middlewares different from a pipeline where the functions are executed one after another.\nThis may seem abstract now, but the examples in the next sections will bring some concreteness to the topic."),(0,o.kt)("h2",{id:"implementation-of-a-middleware"},"Implementation of a Middleware"),(0,o.kt)("p",null,"In this section you learn how to implement a middleware based on a didactic example.\nThe following middleware logs a text and leaves the original function unchanged."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const doSomethingBeforeMiddleware = options => {\n  return requestConfig => {\n    console.log('Implement something here.');\n    options.fn(requestConfig);\n  };\n};\n")),(0,o.kt)("p",null,"In the example the custom code executes before the function ",(0,o.kt)("inlineCode",{parentName:"p"},"fn()"),".\nDo this when you want to adjust things before the actual HTTP request is executed.\nIf you want to process the result of the function in your middleware, implement it the following way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const doSomethingAfterMiddleware = options => {\n  return requestConfig => {\n    options.fn(requestConfig).then(response => {\n      console.log('Do some postprocessing.');\n      return response;\n    });\n  };\n};\n")),(0,o.kt)("p",null,"Remember that the code you put outside the returned function is executed when the functions are composed.\nThis is in general not what you want."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const unintendedMiddleware = options => {\n  console.log(\n    'Executed when middleware is added - not what you want in general'\n  );\n  return options.fn;\n};\n")),(0,o.kt)("p",null,"The example above is not really useful, but also not harmful.\nRemember that a middleware must ",(0,o.kt)("strong",{parentName:"p"},"not")," execute the original function.\nIt adds functionality to the function and creates a new function from it.\nIf you execute it, the whole middleware composition idea is destroyed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const wrongMiddleware = options => {\n  //This would execute the function while the middlewares are added - Do NOT do this.\n  const responseRunning = options.fn(someArgs);\n  return requestConfig => responseRunning;\n};\n")),(0,o.kt)("h2",{id:"order-of-multiple-middlewares"},"Order of Multiple Middlewares"),(0,o.kt)("p",null,"A good practice is to define reusable, single-purpose middlewares.\nYou can add multiple of those middlewares to combine the effects.\nAssume you want to modify your call to have a timeout and use a fallback.\nThe implementation of these middlewares could look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const timeoutMiddleware = options => {\n  return requestConfig =>\n    Promise.race([options.fn(requestConfig), timeoutPromise]);\n};\n\nconst fallbackMiddleware = options => {\n  return requestConfig => {\n    try {\n      return options.fn(requestConfig);\n    } catch (e) {\n      //implement some fallback logic\n    }\n  };\n};\n")),(0,o.kt)("p",null,"Multiple middlewares are added one-by-one to the request.\nThe elements are combined as if the composition operator ","\u2218"," for functions is used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[middlewareA, middlewareB, ...] -> middlewareA after middlewareB after ...\n")),(0,o.kt)("p",null,"If you include the fallback and timeout middleware to your request in the following way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"executeHttpRequest(\n  { url: 'http://example.com' },\n  {\n    middleware: [fallbackMiddleware, timeoutMiddleware],\n    method: 'get'\n  }\n);\n")),(0,o.kt)("p",null,"it would mean ",(0,o.kt)("inlineCode",{parentName:"p"},"fallbackMiddleware")," after ",(0,o.kt)("inlineCode",{parentName:"p"},"timeoutMiddleware")," or a bit more detailed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The initial function is a ",(0,o.kt)("inlineCode",{parentName:"li"},"GET")," request to ",(0,o.kt)("inlineCode",{parentName:"li"},"http://example.com")," called ",(0,o.kt)("em",{parentName:"li"},"f",(0,o.kt)("sub",null,"0")),"."),(0,o.kt)("li",{parentName:"ul"},"The timeout is added first to the HTTP request leading ",(0,o.kt)("em",{parentName:"li"},"h",(0,o.kt)("sub",null,"1"))," in the picture below.\nTherefore, at execution the timeout only counts the execution time of ",(0,o.kt)("em",{parentName:"li"},"f",(0,o.kt)("sub",null,"0"))," and not considering a fallback call."),(0,o.kt)("li",{parentName:"ul"},"After this the fallback is added around ",(0,o.kt)("em",{parentName:"li"},"h",(0,o.kt)("sub",null,"1"))," which is the function with timeout.\nSo the fallback would also handle failures due to the timeout.")),(0,o.kt)(r.Z,{alt:"Middleware execution order",sources:{light:(0,i.Z)("img/middleware_light.svg"),dark:(0,i.Z)("img/middleware_dark.svg")},className:"center",width:"100%",mdxType:"ThemedImage"}),(0,o.kt)("p",null,"If you switched the order of the middlewares:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"executeHttpRequest(\n  { url: 'http://example.com' },\n  {\n    middleware: [timeoutMiddleware, fallbackMiddleware],\n    method: 'get'\n  }\n);\n")),(0,o.kt)("p",null,"the timeout would apply to the original request plus additional time for potential fallback calls (see ",(0,o.kt)("em",{parentName:"p"},"g",(0,o.kt)("sub",null,"1"))," and ",(0,o.kt)("em",{parentName:"p"},"g",(0,o.kt)("sub",null,"2"))," in the picture above).\nThe fallback would not handle failures due to a timeout.\nFrom this example, you see that the order of middlewares is crucial."),(0,o.kt)("p",null,"The provided default resilience middlewares should be added in the following order:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"retry"),(0,o.kt)("li",{parentName:"ol"},"circuit breaker"),(0,o.kt)("li",{parentName:"ol"},"timeout")),(0,o.kt)("p",null,"The SAP Cloud SDK provides default resilience middlewares so that you do not have to worry about the details in most cases.\nYou can find detailed information on the resilience topic in a ",(0,o.kt)("a",{parentName:"p",href:"../guides/resilience"},"dedicated documentation"),"."),(0,o.kt)("h2",{id:"use-the-middleware-context"},"Use the Middleware Context"),(0,o.kt)("p",null,"The previous examples did not use the middleware context.\nHowever, the context provides useful information you can use in your middleware."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Represents the execution context of a middleware.\n */\nexport interface HttpMiddlewareContext {\n  readonly tenantId: string;\n  readonly uri: string;\n  readonly jwt?: string;\n  readonly destinationName?: string;\n}\n")),(0,o.kt)("p",null,"The fallback middleware could consider the URI:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const fallbackMiddleware = options => {\n  return requestConfig => {\n    try {\n      return options.fn(requestConfig);\n    } catch (e) {\n      if (options.context.uri === 'http://system-one.com') {\n        //do something\n      } else {\n        //do something else\n      }\n    }\n  };\n};\n")),(0,o.kt)("h2",{id:"change-request-parameters"},"Change Request Parameters"),(0,o.kt)("p",null,"If you want to change the request parameters you can modify them as well.\nThe SAP Cloud SDK uses the axios client which has a ",(0,o.kt)("inlineCode",{parentName:"p"},"timeout")," property.\nYou could set a timeout on client level like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const clientTimeoutMiddleware = options => {\n  return requestConfig => {\n    return options.fn({ ...requestConfig, timeout: 500 });\n  };\n};\n")),(0,o.kt)("p",null,"Another usage for the middleware would be a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"CSRF")," token fetching:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const customCsrf = options => {\n  return async requestConfig => {\n    requestConfig.headers['x-csrf-token'] = await getCsrfToken();\n    return options.fn(requestConfig);\n  };\n};\n")),(0,o.kt)("p",null,"Note that you have to disable the ",(0,o.kt)("a",{parentName:"p",href:"./connectivity/http-client#csrf-token-fetching"},"default token fetching")," if you want to use a custom middleware."),(0,o.kt)("h2",{id:"execution-order-of-middlewares"},"Execution Order of Middlewares"),(0,o.kt)("p",null,"As discussed in the previous section, the composition order for the new function is from right to left.\nHowever, the composition order does not mimic the order when the code related to the middleware is executed.\nTo illustrate this, consider the four example middlewares below (for simplicity assume that the response and config are just bare strings):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const beforeMiddleware = options => {\n  return requestConfig => options.fn(requestConfig + '/before');\n};\n\nconst afterMiddleware = options => {\n  return requestConfig =>\n    options.fn(requestConfig).then(response => response + '-after');\n};\n")),(0,o.kt)("p",null,"The first middleware changes something before the method is executed and the second two change the response after the request resolves.\nIf you add these four middlewares to a request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"executeHttpRequest(\n  { url: 'http://example.com' },\n  {\n    middleware: [beforeMiddleware, afterMiddleware],\n    method: 'get'\n  }\n);\n")),(0,o.kt)("p",null,"you can work out the resulting function since the middlewares are simple:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"requestConfig => axios.request(requestConfig); //initial function\n\nrequestConfig =>\n  axios.request(requestConfig).then(response => response + '-after'); //afterMiddleware middleware\n\nrequestConfig =>\n  axios\n    .request(requestConfig + '/before')\n    .then(response => response + '-after'); //beforeMiddleware\n")),(0,o.kt)("p",null,"The middlewares are added from right to left, but changes in the config will happen before the response is adjusted.\nNo matter where the related middlewares were positioned.\nThis becomes clearer if you consider a middleware squaring a result which can be done before or after function execution:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const square = x => x * x;\n\nconst squareMiddlewareAfter = fn => x => fn(x).then(x => square(x)); // equivalent fn => x => square(fn(x))\n\nconst squareMiddlewareBefore = fn => x => fn(x ^ 2); // equivalent fn => x => fn(square(x))\n")),(0,o.kt)("p",null,"In one case the resulting function is ",(0,o.kt)("inlineCode",{parentName:"p"},"square(fn(x))")," which is in line with the mathematical composition square ","\u2218"," fn.\nIn the other case it is ",(0,o.kt)("inlineCode",{parentName:"p"},"fn(square(x))")," which is the opposite like the composition."),(0,o.kt)("p",null,"Note that in practice this difference in behavior does not cause problems:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ordering is crucial for the middlewares doing something after the request like the resilience.\nFor these the order is expected by the composition: the most left one is executed last.\nMost of the middlewares are of this kind."),(0,o.kt)("li",{parentName:"ul"},"Middlewares changing the request configuration are rare and in most cases one of them is sufficient.\nEven if you have multiple ones they do not interfere with each other.\nOnly if you have multiple middlewares of this kind changing the same configuration you need to be careful and consider the inverse execution order.")),(0,o.kt)("h2",{id:"benefits-of-middlewares"},"Benefits of Middlewares"),(0,o.kt)("p",null,"You could implement many use cases of middlewares also directly.\nYou could implement a fallback using a global try/catch."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  executeHttpRequest(destination, options);\n} catch (e) {\n  //implement fallback logic\n}\n")),(0,o.kt)("p",null,"However, this has two disadvantages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The first one is more of cosmetic nature.\nThe middlewares encourage you to implement the logic in a separate function which can be reused in different places.\nYour actual business code stays clean.\nThis becomes even more obvious for ",(0,o.kt)("a",{parentName:"li",href:"./odata/execute-request"},"typed clients")," which represent you business requirements more directly."),(0,o.kt)("li",{parentName:"ul"},"The second one is about the position where you can include the code.\nWith the middleware you can include logic directly to the HTTP layer.\nThis is much more powerful than code on the outer layer.")),(0,o.kt)("p",null,"Assume you want to replace the HTTP client of the SAP Cloud SDK with a different one.\nOnly with a middleware this is possible.\nYou have to adjust the request so that it matches your client and the response so that it matches the expected form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import httpClient from 'some-client-like-node-fetch';\n\nconst replaceHttpClientMiddleware = options => {\n  return request => {\n    const castedRequest = castRequest(options.context.fnArgument);\n    return httpClient(castedRequest).then(response => castResponse(response));\n  };\n};\n")))}m.isMDXComponent=!0}}]);