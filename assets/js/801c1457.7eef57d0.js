"use strict";(self.webpackChunksap_cloud_sdk_documentation=self.webpackChunksap_cloud_sdk_documentation||[]).push([[6944],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),h=a,f=d["".concat(c,".").concat(h)]||d[h]||l[h]||s;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},52497:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return l}});var r=n(87462),a=n(63366),s=(n(67294),n(3905)),o=["components"],i={},c=void 0,u={unversionedId:"features/odata/common/batch/changeset",id:"version-v1/features/odata/common/batch/changeset",title:"changeset",description:"A changeset is a collection of HTTP POST, PUT, PATCH and DELETE operations - requests built by CreateRequestBuilders, UpdateRequestBuilders, and DeleteRequestBuilders in terms of the SAP Cloud SDK.",source:"@site/docs-js_versioned_docs/version-v1/features/odata/common/batch/changeset.mdx",sourceDirName:"features/odata/common/batch",slug:"/features/odata/common/batch/changeset",permalink:"/cloud-sdk/docs/js/v1/features/odata/common/batch/changeset",draft:!1,tags:[],version:"v1",frontMatter:{}},p={},l=[],d={toc:l};function h(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"A changeset is a collection of HTTP ",(0,s.kt)("inlineCode",{parentName:"p"},"POST"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"PUT"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"PATCH")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"DELETE")," operations - requests built by ",(0,s.kt)("a",{parentName:"p",href:"#create-request-builder"},(0,s.kt)("inlineCode",{parentName:"a"},"CreateRequestBuilder"),"s"),", ",(0,s.kt)("a",{parentName:"p",href:"#update-request-builder"},(0,s.kt)("inlineCode",{parentName:"a"},"UpdateRequestBuilder"),"s"),", and ",(0,s.kt)("a",{parentName:"p",href:"#delete-request-builder"},(0,s.kt)("inlineCode",{parentName:"a"},"DeleteRequestBuilder"),"s")," in terms of the SAP Cloud SDK.\nThe order of execution within a changeset is not defined.\nThis differs from the whole batch request itself, where the order is defined.\nTherefore, the requests within one changeset should not depend on each other.\nIf the execution of any request within a changeset fails, the whole changeset will be reflected as an error in the response.\nThe changeset will not be applied, much like a database transaction."),(0,s.kt)("p",null,"Unlike retrieve requests, you can not pass change requests to the ",(0,s.kt)("inlineCode",{parentName:"p"},"batch")," function directly.\nYou have to combine them in a ",(0,s.kt)("inlineCode",{parentName:"p"},"changeset"),", which in turn can be passed to the ",(0,s.kt)("inlineCode",{parentName:"p"},"batch")," function.\nOnce a batch request is executed, it returns a list of ",(0,s.kt)("a",{parentName:"p",href:"#responses"},(0,s.kt)("inlineCode",{parentName:"a"},"BatchResponse"),"s"),"."),(0,s.kt)("p",null,"If a changeset was executed successfully, its corresponding response is of type ",(0,s.kt)("inlineCode",{parentName:"p"},"WriteResponses")," and contains a collection of all raw responses to the requests in the changeset.\nIf the execution fails, the response is an ",(0,s.kt)("inlineCode",{parentName:"p"},"ErrorResponse"),"."),(0,s.kt)("p",null,"In the example below, we create a list of ",(0,s.kt)("a",{parentName:"p",href:"#update-request-builder"},(0,s.kt)("inlineCode",{parentName:"a"},"UpdateRequestBuilder"),"s")," from a list of addresses.\nWe combine these change requests into one ",(0,s.kt)("inlineCode",{parentName:"p"},"changeset")," and pass it to the ",(0,s.kt)("inlineCode",{parentName:"p"},"batch")," request, which we execute against a destination."),(0,s.kt)("p",null,"Once we execute the ",(0,s.kt)("inlineCode",{parentName:"p"},"batch")," request, we get a list of ",(0,s.kt)("inlineCode",{parentName:"p"},"BatchResponse"),"s, which in this example contains one response only, i.e. the one for the changeset."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"async function updateAddresses(\n  businessPartnerAddresses: BusinessPartnerAddress[]\n): Promise<BusinessPartnerAddress[]> {\n  // Create update requests\n  const updateRequests = businessPartnerAddresses.map(address =>\n    BusinessPartnerAddress.requestBuilder().update(address)\n  );\n\n  // Execute batch request with one changeset\n  const batchResponses = await batch(\n    // Combine update requests into one changeset\n    changeset(...updateRequests)\n  ).execute(destination);\n\n  // Get response for the changeset request\n  const changesetResponse = batchResponses[0];\n\n  // ...\n}\n")))}h.isMDXComponent=!0}}]);